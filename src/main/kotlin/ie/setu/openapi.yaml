openapi: 3.0.0
info:
  version: 1.0.0
  title: Health Tracker API
  description: This API provides endpoints for handling CRUD operations on the Health Tracker data.
  contact:
    name: Martin Lorimer
    email: martin.lorimer@gmail.com
paths:
  /api/activities/{activity-id}:
    get:
      parameters:
        - $ref: '#/components/parameters/ActivityIdPath'
      responses:
        200:
          description: This is a specific activity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        404:
          description: Activity with Id not found
      tags:
        - Activities
    patch:
      parameters:
        - $ref: '#/components/parameters/ActivityIdPath'
      description: This updates/modifies the activity with the specified Id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activity'
      responses:
        204:
          description: The activity has been updated/modified
        404:
          description: Activity with Id not found
      tags:
        - Activities
    delete:
      parameters:
        - $ref: '#/components/parameters/ActivityIdPath'
      description: This deletes the activity with the specified Id
      responses:
        200:
          description: Activity has been deleted
        404:
          description: Activity with Id not found
      tags:
        - Activities
  /api/activities:
    get:
      responses:
        200:
          description: This is a list of all activities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
        404:
          description: No activities in database
      tags:
        - Activities
    post:
      description: This creates a new activity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activity'
      responses:
        201:
          description: The activity is created
      tags:
        - Activities
  /api/authentication:
    post:
      description: Checks user credentials and returns JWT token for authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        200:
          description: User provided correct credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwt:
                    type: string
                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsZXZlbCI6InVzZXIiLCJuYW1lIjoiTWFydGluIiwiZW1haWwiOiJtYXJ0aW5AbWFpbC5jb20ifQ.yI2gVktSbSmZGh4Tv3a4Hx0C9CLHsBO-60hL40PBQ0U
        401:
          description: Invalid user credentials
      tags:
        - Authentication
  /api/authentication/validate:
    get:
      responses:
        200:
          description: Token in Authorization header is valid
          content:
            text/plain:
              example: Hi Siobhan
        401:
          description: Not authorized
      tags:
        - Authentication
  /api/ingredients/:
    get:
      responses:
        200:
          description: This is a list of the ingredients in the app
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
        404:
          description: No ingredients in database
      tags:
        - Ingredients
  /api/meals/{ingredient-id}:
    get:
      parameters:
        - $ref: '#/components/parameters/IngredientIdPath'
      responses:
        200:
          description: This is a specific ingredient in the app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
        404:
          description: Ingredient not found
      tags:
        - Ingredients
  /api/meals/:
    get:
      responses:
        200:
          description: This is a list of the meals in the app
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meal'
        404:
          description: No meals in database
      tags:
        - Meals
    post:
      description: Add a meal to the app
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealDTO'
      responses:
        201:
          description: The meal has been created
        400:
          description: Invalid meal name
      tags:
        - Meals
  /api/meals/{meal-id}:
    get:
      parameters:
        - $ref: '#/components/parameters/MealIdPath'
      responses:
        200:
          description: This is a specific meal in the app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
        404:
          description: Meal not found
      tags:
        - Meals
    delete:
      parameters:
        - $ref: '#/components/parameters/MealIdPath'
      description: This deletes a specific meal in the app
      responses:
        204:
          description: The meal has been deleted
        404:
          description: Meal not found
      tags:
        - Meals
  /api/meals/{meal-id}/ingredients:
    get:
      parameters:
        - $ref: '#/components/parameters/MealIdPath'
      responses:
        200:
          description: This is a list of the ingredients associated with a specific meal in the app
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
        404:
          description: Meal not found
      tags:
        - Meals
  /api/users:
    get:
      responses:
        200:
          description: This is a list of the users in the app
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        404:
          description: No users in database
      tags:
        - Users
    post:
      description: Add a user to the app
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: The user has been created
      tags:
        - Users
  /api/users/{user-id}:
    get:
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
      responses:
        200:
          description: This is a specific user in the app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
      tags:
        - Users
    patch:
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
      description: This updates/modifies a specific user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        204:
          description: The user has been updated/modified
        404:
          description: User not found
      tags:
        - Users
    delete:
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
      description: This deletes a specific user in the app
      responses:
        204:
          description: The user has been deleted
        404:
          description: User not found
      tags:
        - Users
  /api/users/email/{email}:
    get:
      parameters:
        - $ref: '#/components/parameters/EmailPath'
      responses:
        200:
          description: This is a user associated with an email address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User associated with email address not found
      tags:
        - Users
  /api/users/{user-id}/activities:
    get:
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
      responses:
        200:
          description: This is a list of activities associated with the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
        404:
          description: No activities for user found
      tags:
        - Users
    delete:
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
      description: This deletes all activities associated with a user
      responses:
        204:
          description: All activities associated with the user are deleted
        404:
          description: User not found
      tags:
        - Users
  /api/users/{user-id}/meals:
    get:
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
      responses:
        200:
          description: This is all meals associated with a user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        404:
          description: No meals found for user with specified id
    post:
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealDTO'
      responses:
        201:
          description: Add a meal to a user in the app
        400:
          description: Invalid meal name
      tags:
        - Users
    delete:
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
      description: This deletes all meals associated with a user
      responses:
        204:
          description: All meals associated with the user are deleted
        404:
          description: No meals associated with user to delete
      tags:
        - Users
  /api/users/{user-id}/meals/{meal-id}:
    delete:
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
        - $ref: '#/components/parameters/MealIdPath'
      description: This deletes a specific meal that has been associated with a user
      responses:
        204:
          description: Meals associated with the user is deleted
        404:
          description: No meal or user found for specified ids
      tags:
        - Users
components:
  parameters:
    ActivityIdPath:
      in: path
      name: activity-id
      description: Activity Id path parameter
      required: true
      schema:
        type: integer
        example: 3232
    EmailPath:
      in: path
      name: email
      description: Email path parameter
      required: true
      schema:
        type: string
        example: joe@soap.com
    IngredientIdPath:
      in: path
      name: ingredient-id
      description: Ingredient Id path parameter
      required: true
      schema:
        type: integer
        example: 3232
    MealIdPath:
      in: path
      name: meal-id
      description: Meal Id path parameter
      required: true
      schema:
        type: integer
        example: 3232
    UserIdPath:
      in: path
      name: user-id
      description: User id path parameter
      required: true
      schema:
        type: integer
        example: 3232
  schemas:
    Activity:
      type: object
      properties:
        id:
          type: integer
          example: 3232
        name:
          type: string
          example: Exercise
    Ingredient:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        calories:
          type: number
          format: double
          example: 1.1
        servingSizeG:
          type: number
          format: double
          example: 1.1
        fatTotalG:
          type: number
          format: double
          example: 1.1
        fatSaturatedG:
          type: number
          format: double
          example: 1.1
        proteinG:
          type: number
          format: double
          example: 1.1
        sodiumMg:
          type: integer
          format: int32
        potassiumMg:
          type: integer
          format: int32
        cholesterolMg:
          type: integer
          format: int32
        carbohydratesTotalG:
          type: number
          format: double
          example: 1.1
        fiberG:
          type: number
          format: double
          example: 1.1
        sugarG:
          type: number
          format: double
          example: 1.1
        mealId:
          type: integer
          format: int32
    Meal:
      type: object
      properties:
        id:
          type: integer
          example: 3232
        name:
          type: string
          example: Salmon salad
    MealDTO:
      type: object
      properties:
        name:
          type: string
          example: Salmon salad
    User:
      type: object
      properties:
        id:
          type: integer
          example: 3232
        name:
          type: string
          example: Joe Soap
        email:
          type: string
          example: joe@soap.com
    UserDTO:
      type: object
      properties:
        name:
          type: string
          example: Joe Soap
        email:
          type: string
          example: joe@soap.com
        password:
          type: string
          example: password